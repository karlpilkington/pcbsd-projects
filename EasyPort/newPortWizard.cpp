#include "newPortWizard.h"
#include "ui_newPortWizard.h"

NewPortWizard::NewPortWizard(QWidget *parent) : QDialog(parent), ui(new Ui::NewPortWizard){
  ui->setupUi(this);
  portCreated = false; //output variable
  newPortDir.clear(); //output variable
  portdir.clear(); //internal variable
  //Make sure create button is disabled initially
  ui->push_create->setEnabled(false);
  connect(ui->push_create, SIGNAL(clicked()), this, SLOT(slotCreatePort()) );
  connect(ui->push_cancel, SIGNAL(clicked()), this, SLOT(slotCancel()) );
	
  //Setup the required inputs for value checking
  connect(ui->line_name, SIGNAL(textChanged(QString)), this, SLOT(slotCheckInputs()) );
  connect(ui->line_version, SIGNAL(textChanged(QString)), this, SLOT(slotCheckInputs()) );
  connect(ui->line_summary, SIGNAL(textChanged(QString)), this, SLOT(slotCheckInputs()) );
  connect(ui->line_mastersite, SIGNAL(textChanged(QString)), this, SLOT(slotCheckInputs()) );
  connect(ui->line_maintainer, SIGNAL(textChanged(QString)), this, SLOT(slotCheckInputs()) );
  connect(ui->line_category, SIGNAL(textChanged(QString)), this, SLOT(slotCheckInputs()) );
  //Now try to add all the suggestions
  slotGetOptionHelps();
}

NewPortWizard::~NewPortWizard(){
	
}

void NewPortWizard::setNewPortBaseDir(QString dir){
  portdir = dir;
}

// ==============
//     PRIVATE SLOTS
// ==============
void NewPortWizard::slotGetOptionHelps(){
	
}

void NewPortWizard::slotCheckInputs(){
  bool invalid = (ui->line_name->text().simplified().isEmpty() 
	|| ui->line_version->text().simplified().isEmpty()
	|| ui->line_summary->text().simplified().isEmpty()
	|| ui->line_mastersite->text().simplified().isEmpty()
	|| ui->line_maintainer->text().simplified().isEmpty()
	|| ui->line_category->text().simplified().isEmpty() );
	
  ui->push_create->setEnabled(!invalid);	  
}

void NewPortWizard::slotCreatePort(){
  //Go through all the inputs and create the port
  QStringList vars, vals;
  //All the required MAKEFILE variables
  // - PORTNAME is strict requirement for the function -- used below
  vars << "PORTVERSION"; vals << ui->line_version->text().simplified();
  vars << "CATEGORIES"; vals << ui->line_category->text().simplified();
  vars << "COMMENT"; vals << ui->line_summary->text().simplified();
  vars << "MASTER_SITES"; vals << ui->line_mastersite->text();
  vars << "MAINTAINER"; vals << ui->line_maintainer->text().simplified();
  //Now optional MAKEFILE variables
  if(!ui->line_masterSub->text().isEmpty()){ vars << "MASTER_SITE_SUBDIR"; vals << ui->line_masterSub->text(); }
  if(!ui->line_distfile->text().isEmpty()){ vars << "DISTNAME"; vals << ui->line_distfile->text(); }
  if(!ui->line_masterSub->text().isEmpty()){ vars << "MASTER_SITE_SUBDIR"; vals << ui->line_masterSub->text(); }
  //Create the MAKEFILE
  QString name = ui->line_name->text().simplified();
  QString portPath = portdir+"/"+name;
  QStringList contents = PortUtils::generateNewMakefile(name, vars, vals);
  portCreated = PortUtils::createFile(portPath+"/Makefile", contents);
  if(!portCreated){
    QMessageBox::warning(this, tr("Error"), QString(tr("Could not create the port: %1")).arg(portPath) );
    return;
  }
  //Generate pkg-descr based on inputs
  contents = PortUtils::generatePkgDescr(ui->text_description->toPlainText(), ui->line_website->text());
  if(!contents.isEmpty()){
    PortUtils::createFile(portPath+"/pkg-descr", contents);
  }
  // Don't generate the pkg-plist - this will be empty anyway
  // Don't generate the distinfo file - let this be generated by the main GUI later
  newPortDir = portPath; //fill output variable
  this->close();
}

void NewPortWizard::slotCancel(){
  portCreated = false;
  this->close();
}
